<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构题目贴</title>
      <link href="/2020/02/14/data-structure-exercise/"/>
      <url>/2020/02/14/data-structure-exercise/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/02/14/data-structure-exercise/(408).jpg" alt="(408)"></p>        <h1 id="前言">          <span class="heading-link">前言</span>        </h1>      <p>鸽<strong>🕊</strong>了自己很久的数据结构刷题！！</p><p>必须整活起来！</p><a id="more"></a>        <h1 id="加油！">          <span class="heading-link">加油！</span>        </h1>              <h2 id="打卡记录：">          <span class="heading-link">打卡记录：</span>        </h2>      <p>应该坚持天数：10    实际坚持天数：10</p><p>刷题数：11</p>        <h2 id="2020年二月-2月14开始">          <span class="heading-link">2020年二月(2月14开始)</span>        </h2>              <h3 id="2月14日">          <span class="heading-link">2月14日</span>        </h3>      <p>情人节苦逼的我还是得整活！！</p>        <h4 id="题目描述">          <span class="heading-link">题目描述</span>        </h4>      <p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public:</span><br><span class="line">    bool Find(int target, vector&lt;vector&lt;int&gt; &gt; array) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h4 id="解法：">          <span class="heading-link">解法：</span>        </h4>      <p><span class="external-link"><a href="https://blog.nowcoder.net/n/d332492753844d18aa4edc484e3c1318?f=comment" target="_blank" rel="noopener">https://blog.nowcoder.net/n/d332492753844d18aa4edc484e3c1318?f=comment</a><i class="fa fa-external-link"></i></span></p><p>个人的想法是这里的四(二)，可是不会代码实现(老不会递归了！）</p><p>法一是最优的，法二也很秀思路可以理解一下。</p><p>第一天心得：好烦啊第一题都不会，佛了！继续努力吧。早上起来一定要再看一遍</p><p>2020.2.15  0:23</p>        <h3 id="2月15日">          <span class="heading-link">2月15日</span>        </h3>      <p>刷他娘的！</p>        <h4 id="题目描述-1">          <span class="heading-link">题目描述</span>        </h4>      <p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaceSpace</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h4 id="解法：-1">          <span class="heading-link">解法：</span>        </h4>      <p>个人的想法是从前到后，然后新建一个字符串，一个个复制，当遇到空格时就替换（一系列操作），然后最后再复制回原来的。</p><p>这方法缺点就是，空间复杂度比较高。</p><p>大佬有两种解释做法：</p><p>1、比较笨的就是从前到后，遇到的就整体后移，这样很慢，后面的字符会重复移动，但是不用开新空间。</p><p>2、比较推荐的就是从后往前的后移，每个字符移动一次，这样移动的次数会大大减少，（这里有一个细节就是先计算了替换了空格之后的长度，后移时，直接移到最后面）</p><p>第二天心得：确实牛逼的人好牛逼</p>        <h3 id="2月16日">          <span class="heading-link">2月16日</span>        </h3>      <p>明天开始网课了，有点想吐</p>        <h4 id="题目描述-2">          <span class="heading-link">题目描述</span>        </h4>      <p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">*  struct ListNode &#123;</span><br><span class="line">*        int val;</span><br><span class="line">*        struct ListNode *next;</span><br><span class="line">*        ListNode(int x) :</span><br><span class="line">*              val(x), next(NULL) &#123;</span><br><span class="line">*        &#125;</span><br><span class="line">*  &#125;;</span><br><span class="line">*&#x2F;</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; printListFromTailToHead(ListNode* head)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h4 id="解法：-2">          <span class="heading-link">解法：</span>        </h4>      <p>四种思路：</p><p>有四种思路，第一就是利用栈先入后出的特性完成，第二就是存下来然后进行数组翻转。第三是利用递归,第四种 迭代法。</p><p>这里前两种是常规也是正常的思路，第三第四种方法思想比较秀</p><p>栈思路：</p><p>数组翻转：数组翻转可以用C++自带的函数，也可以自己实现<br>   //reverse(value.begin(),value.end()); //C++自带的翻转函数</p><p>递归思路：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; value;</span><br><span class="line">    vector&lt;int&gt; printListFromTailToHead(ListNode* head) &#123;</span><br><span class="line">        ListNode *p&#x3D;NULL;</span><br><span class="line">        p&#x3D;head;</span><br><span class="line">        if(p!&#x3D;NULL)&#123;</span><br><span class="line">            if(p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">                printListFromTailToHead(p-&gt;next);</span><br><span class="line">            &#125;</span><br><span class="line">            value.push_back(p-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>迭代法：</p><p><strong>总结为</strong>：先存储当前节点的下一节点，再反转当前节点的pnext指针，最后重置head头部。 </p><p><strong>注意</strong>：若head指向Null而不放数据，则prev、curr、next应相应改变 </p><p><img src="/2020/02/14/data-structure-exercise/2.gif" alt="2"></p><p>个人一开始想法是偏向于第四种，但是由于题意不名，不知道能更改next指针。</p><p>第三天心得：坚持第三天，感觉有点意思</p>        <h3 id="2月17日">          <span class="heading-link">2月17日</span>        </h3>      <p>原本今天要做树的题的，但是发现自己知识点十分不咋地牢固，重新要开始复习了，就跳了一题做了，节省时间复习一下。</p>        <h4 id="题目描述-3">          <span class="heading-link">题目描述</span>        </h4>      <p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void push(int node) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    int pop() &#123;    </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    stack&lt;int&gt; stack1;</span><br><span class="line">    stack&lt;int&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h4 id="解答">          <span class="heading-link">解答</span>        </h4>      <p>太水了我都会做，一个用来入栈，一个用来出栈</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void push(int node) &#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line">    int pop() &#123;</span><br><span class="line">        int a;</span><br><span class="line">        if(stack2.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            while(!stack1.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                a&#x3D;stack1.top();</span><br><span class="line">                stack2.push(a);</span><br><span class="line">                stack1.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a&#x3D;stack2.top;</span><br><span class="line">        stack2.pop;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    stack&lt;int&gt; stack1;</span><br><span class="line">    stack&lt;int&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>要注意的是，不是每次的都pop完，所以仅当stack2空时才能让stack1入栈，因为stack2里的都是先的。</p><p>第四天心得：细节要注意，基础要注意！</p>        <h3 id="2月18日">          <span class="heading-link">2月18日</span>        </h3>      <p>放假一个月了，在家舒服了。</p>        <h4 id="题目描述-4">          <span class="heading-link">题目描述</span>        </h4>      <p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。<br>     输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。<br>     例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。<br>     NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int minNumberInRotateArray(vector&lt;int&gt; rotateArray) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h4 id="解答-1">          <span class="heading-link">解答</span>        </h4>      <p>这题第一眼看到想法就是脑瘫题，tm的不就是简单的遍历查找吗？然后越看越不对，越想越不对劲，怎么这样嘛！</p><p>然后看了大家讨论才知道这题考点是查找的方式。</p><p>计算数组是排序的，再线性地查找就显得不高效了。排序数组，自然要想到二分查找。只是这里的操作和常规二分查找不同。 </p><p><img src="/2020/02/14/data-structure-exercise/data-structure-exercise%5C3.jpg" alt="3"></p><p>可以通过a[right]和a[mid]的关系来判断mid降落在前后哪一个部分,本题最巧妙的一点是，当出现特殊情况：a[left]==a[right] 的时候的处理。</p><p>当a[left]==a[right] ，假如a[mid]=a[right]的时候，根本没法判断。</p><p>我一开始想到的处理方法是当出现a[left]==a[right]=a[mid]这种情况是就用最坏的方法——直接遍历查找返回，但后来看到讨论区有人的更优的解法：在前期就去掉a[left]==a[right]的情况，缩小区域，排除掉特这种特殊情况：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while(a[right]&#x3D;&#x3D;a[left])&#123;</span><br><span class="line">right--;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>非常的妙啊，基本是这道题最秀的地方了</p><p>后面就没什么特别的，看了一圈也没有什么别的方法，按照上面的去做吧,下面附上个人ac代码</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int minNumberInRotateArray(vector&lt;int&gt; a) </span><br><span class="line">&#123;</span><br><span class="line">        int left&#x3D;0,mid;</span><br><span class="line">int right&#x3D;a.size()-1;</span><br><span class="line">if (right&#x3D;&#x3D;-1)</span><br><span class="line">return 0;</span><br><span class="line">while(a[right]&#x3D;&#x3D;a[left])</span><br><span class="line">&#123;</span><br><span class="line">right--;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line">while(a[left]&gt;a[right])</span><br><span class="line">&#123;</span><br><span class="line">mid&#x3D;left+(right-left)&#x2F;2;</span><br><span class="line">if(a[right]&gt;a[mid])</span><br><span class="line">right&#x3D;mid;</span><br><span class="line">else if(a[right]&lt;&#x3D;a[mid])</span><br><span class="line">left&#x3D;mid+1;</span><br><span class="line">&#125;</span><br><span class="line">return a[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>第五天心得：虽然题目不难，但能大致自己打出来，有一点进步了，加油。</p>        <h3 id="2月19日">          <span class="heading-link">2月19日</span>        </h3>              <h4 id="题目描述-5">          <span class="heading-link">题目描述</span>        </h4>      <p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。   n&lt;=39  </p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int Fibonacci(int n) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h4 id="解答-2">          <span class="heading-link">解答</span>        </h4>      <p><span class="external-link"><a href="https://www.cnblogs.com/zkfopen/p/11245857.html" target="_blank" rel="noopener">斐波那契数列</a><i class="fa fa-external-link"></i></span></p><p>这个博客里面讲的非常详细，值得注意一点的是，关于讨论区很巧妙的解答，实际上就是第二种方法循环的简化版形式。</p><p>其中第四种方法，我还看不懂，等我复习完线性代数一定来</p><p>第六天心得：今天好水啊。</p>        <h3 id="2月20日">          <span class="heading-link">2月20日</span>        </h3>      <p>今天第一题更水了，我打算做两题</p>        <h4 id="题目1描述">          <span class="heading-link">题目1描述</span>        </h4>      <p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int jumpFloor(int number) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h4 id="解法">          <span class="heading-link">解法</span>        </h4>      <p>a.如果两种跳法，1阶或者2阶，那么假定第一次跳的是一阶，那么剩下的是n-1个台阶，跳法是f(n-1);  </p><p>b.假定第一次跳的是2阶，那么剩下的是n-2个台阶，跳法是f(n-2)  </p><p>c.由a\b假设可以得出总跳法为: f(n) = f(n-1) + f(n-2)   </p><p>所以，这个不就是斐波那契数列吗？</p><p>当然这个是有点特殊的斐波那契</p><p>​                   | 1, (n=1)  </p><p>   f(n) =     | 2, (n=2)  </p><p>​                   | f(n-1)+f(n-2) ,(n&gt;2,n为整数)</p><p>就不能用昨天的法3了，法4能不能我不知道。</p><p>总之很水。</p>        <h4 id="题目2描述">          <span class="heading-link">题目2描述</span>        </h4>      <p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 </p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int jumpFloorII(int number) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h4 id="解法-1">          <span class="heading-link">解法</span>        </h4>      <p>吐了，记录第一题才来第二题，发现不都是斐波那契那个blog里面的吗，又水了一道，看来今天是想给我放假的。</p><p>不过今天这样还是有收获的，这道题的话就是f(n)=1+f(1)+f(2)+ ··· +f(n-1)</p><p>f(n)=2f(n-1)，递归一下f(n)=2^(n-1)</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return pow(2,number-1);</span><br></pre></td></tr></table></div></figure><p>就行了</p><p>第七天心得：今天好水啊！但是对递归的概念有一点明白。</p>        <h3 id="2月21日">          <span class="heading-link">2月21日</span>        </h3>      <p>昨天就看到今天会很水了。</p>        <h4 id="题目描述-6">          <span class="heading-link">题目描述</span>        </h4>      <p>  我们可以用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？ </p><p>  比如n=3时，2*3的矩形块有3种覆盖方法： </p><p>  <img src="/2020/02/14/data-structure-exercise/C:%5CHexo%5Csource_posts%5Cdata-structure-exercise%5C4.png" alt="4"></p>        <h4 id="解答-3">          <span class="heading-link">解答</span>        </h4>      <p>还是斐波那契。<img src="/2020/02/14/data-structure-exercise/5.png" alt="5"></p><p>代码一样的</p><p>第八天心得：水，但是还是要学会一点。</p>        <h3 id="2月22日">          <span class="heading-link">2月22日</span>        </h3>      <p>今天人有点傻了。</p>        <h4 id="题目描述-7">          <span class="heading-link">题目描述</span>        </h4>      <p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">     int  NumberOf1(int n) &#123;</span><br><span class="line">         </span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h4 id="解答-4">          <span class="heading-link">解答</span>        </h4>      <p>一般方法:</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;-------------可能陷入死循环的解法---------------------</span><br><span class="line">    public static int NumberOf1_CanNotUse(int n) &#123;</span><br><span class="line">        int count &#x3D; 0;</span><br><span class="line">        while (n !&#x3D; 0) &#123;</span><br><span class="line">            &#x2F;*</span><br><span class="line">            * 用1和n进行位与运算，</span><br><span class="line">            * 结果要是为1则n的2进制形式</span><br><span class="line">            * 最右边那位肯定是1，否则为0</span><br><span class="line">            *&#x2F;</span><br><span class="line">            if ((n &amp; 1) &#x3D;&#x3D; 1) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;把n的2进制形式往右推一位</span><br><span class="line">            n &#x3D; n &gt;&gt; 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>死循环？是因为负数右移，最左边的用1填充 ，这样可以改成</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n&#x3D;n&gt;&gt;&gt;1    &#x2F;&#x2F;逻辑右移</span><br></pre></td></tr></table></div></figure><p>还可以：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;思想：用1（1自身左移运算，其实后来就不是1了）和n的每位进行位与，来判断1的个数</span><br><span class="line">    private static int NumberOf1_low(int n) &#123;</span><br><span class="line">        int count &#x3D; 0;</span><br><span class="line">        int flag &#x3D; 1;</span><br><span class="line">        while (flag !&#x3D; 0) &#123;</span><br><span class="line">            if ((n &amp; flag) !&#x3D; 0) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            flag &#x3D; flag &lt;&lt; 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>特殊方法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123; </span><br><span class="line">      public int NumberOf1(int n) &#123; </span><br><span class="line">          int count &#x3D; 0; </span><br><span class="line">           while(n!&#x3D; 0)&#123; </span><br><span class="line">               count++; </span><br><span class="line">               n &#x3D; n &amp; (n - 1); </span><br><span class="line">            &#125; </span><br><span class="line">          return count; </span><br><span class="line">      &#125; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure><p>​        如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。</p><p>​        举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&amp;1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。</p><p>第9天心得：位运算，不会，真实。</p>        <h3 id="2月23日">          <span class="heading-link">2月23日</span>        </h3>      <p>我以为我早想清楚</p><p>不由自主恍恍惚惚又走回头路</p><p>再看一眼有过的幸福</p>        <h4 id="题目描述-8">          <span class="heading-link">题目描述</span>        </h4>      <p>  给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。 </p><p>  保证base和exponent不同时为0 </p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    double Power(double base, int exponent) &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h4 id="解答-5">          <span class="heading-link">解答</span>        </h4>      <p>我自己ac的是用最笨的方法——暴力，一个个乘；</p><p>但这题是典型的快速幕，正所谓快速幂，就是快速算底数的n次幂。其时间复杂度为 O(log₂N)， 与朴素的O(N)相比效率有了极大的提高。 具体算法原理以及优化可看下面的网站。</p><p><span class="external-link"><a href="https://blog.csdn.net/qq_19782019/article/details/85621386#%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%E5%BF%AB%E9%80%9F%E5%B9%82%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%B8%A6%E4%BD%A0%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E4%BC%98%E5%8C%96" target="_blank" rel="noopener">快速幂算法（全网最详细地带你从零开始一步一步优化）</a><i class="fa fa-external-link"></i></span></p><p>本题用快速幂的代码：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    double Power(double base, int exponent) &#123;</span><br><span class="line">        long long p &#x3D; abs((long long)exponent);</span><br><span class="line">      double r &#x3D; 1.0;</span><br><span class="line">        while(p)&#123;</span><br><span class="line">            if(p &amp; 1) r *&#x3D; base;</span><br><span class="line">            base *&#x3D; base;</span><br><span class="line">            p &gt;&gt;&#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return exponent &lt; 0 ? 1&#x2F; r : r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>第10天心得：算法的改进和差距真的影响好大！</p>]]></content>
      
      
      <categories>
          
          <category> 打卡 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>English-study-diary</title>
      <link href="/2020/02/14/English-study-diary/"/>
      <url>/2020/02/14/English-study-diary/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/02/14/English-study-diary/(7).jpg" alt="(7)"></p>        <h1 id="前言">          <span class="heading-link">前言</span>        </h1>      <p> 考研英语999999999词，冲了！</p><a id="more"></a>        <h1 id="打卡记录：">          <span class="heading-link">打卡记录：</span>        </h1>      <p>应该坚持天数：9      实际坚持天数：9</p><p>背诵轮数： 0           整理单词： 285          背诵单词：0</p>        <h2 id="2020年二月-2月15开始">          <span class="heading-link">2020年二月(2月15开始)</span>        </h2>              <h3 id="2月15日">          <span class="heading-link">2月15日</span>        </h3>      <p>整理+速记：a-advise      共112词</p>        <h3 id="2月16日">          <span class="heading-link">2月16日</span>        </h3>      <p>整理+速记：loose-sound       共31词</p><p>先前复习    共80词</p>        <h3 id="2月17日">          <span class="heading-link">2月17日</span>        </h3>      <p>整理+速记：abuse-susceptible       共46词</p><p>先前复习     共63词</p><p>单词视频观看     23分钟</p>        <h3 id="2月18日">          <span class="heading-link">2月18日</span>        </h3>      <p>(心态小崩，昨天晚上弄东西到三点半，最后整理英语发现没保存)</p><p>整理+速记：access-recede       共29词</p><p>先前复习     共0词</p><p>单词视频观看     33分钟</p>        <h3 id="2月19日">          <span class="heading-link">2月19日</span>        </h3>      <p>整理+速记： coincident-accidental        共10词</p><p>先前复习         共85个词</p><p>单词视频观看        0分钟</p><p>2月20日</p><p>先前复习         共141个词 </p>        <h3 id="2月21日">          <span class="heading-link">2月21日</span>        </h3>      <p>整理+速记：     claim-escort    共57个词</p><p>先前复习       共0词</p><p>单词视频观看        38分钟</p>        <h3 id="2月22日">          <span class="heading-link">2月22日</span>        </h3>      <p>先前复习       共285词</p><p>2月23日</p><p>整理+速记：     account-mutual    共26个词</p><p>单词视频观看        24分钟</p>]]></content>
      
      
      <categories>
          
          <category> 考研英语 </category>
          
          <category> 打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2020/02/14/hexo-built/"/>
      <url>/2020/02/14/hexo-built/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/02/14/hexo-built/(13).jpg" alt="(13)"></p><p>hexo博客搭建指南！</p><a id="more"></a><p>鸽自己好多天，原本说建完站就写个建站过程和心得，不能再拖下去了，必须冲了！</p>        <h1 id="前言：为什么要建个人博客">          <span class="heading-link">前言：为什么要建个人博客</span>        </h1>      <p>这是非常重要的一点！</p><p>建博客这个想法，说实话我原本根本都没有想过去建自己的博客，直到大学一个很好的朋友跟我提到说起了建博客这件事，我才有了建博客的念头，正好今年冠状病毒导致的开学延期，让我有充足的时间去准备，我也确定了要建个人博客。</p><p>为什么要搭建个人博客？</p><p>这点我想对于每个人都不一样，对我而言，更多的是一种记录，打卡坚持，激励自己把知识点都上传，当然还有一种很舒服的感觉。</p><p>如果你只是想装逼，🆗，这篇文章太合适你了，傻瓜式教学，照着做就行；如果你真正是想建一个博客来记录学习知识，🆗，这篇文章太合适你了，傻瓜式教学，照着做就行。</p><p>综上所述，我是不要脸，但是要一定要明确自己建站的目的，这对你的坚持动力和未来建站的优化有一定的区别。</p><p>那么建站是不是有非常多的好处呢？</p><p>废话，没好处你能进来看这文章？但是要分清楚，做大部分事都是有好处的，就算是学习一门很偏僻的语言都有好处，这个好处对你有没有用，取决于你的未来规划。</p><p>如果你未来去的地方正好讲那个偏僻的语言，那好处不就大了！如果你后半生可能都用不上那种语言，那么虽然有好处，但是这好处对你的影响不大！</p><p>同理，建站是不是有非常多的好处？肯定的是有好处，但是根据看你未来的发展规划，来确定在同样有好处的情况下，你是应该去学很偏僻的语言，还是来建站。一切因个人而异，确定下来自己为什么要建站，想好原因，just do it！</p>        <h1 id="步骤">          <span class="heading-link">步骤</span>        </h1>              <h2 id="大致情况">          <span class="heading-link">大致情况</span>        </h2>      <p><strong>搭建个人博客=域名+外网服务器+解析</strong></p>        <h2 id="准备工作">          <span class="heading-link">准备工作</span>        </h2>              <h3 id="学会Github的使用">          <span class="heading-link">学会Github的使用</span>        </h3>      <p>教程建议参考网站：</p><p><span class="external-link"><a href="https://blog.csdn.net/qq_37512323/article/details/80693445" target="_blank" rel="noopener">Github新手使用指南</a><i class="fa fa-external-link"></i></span></p><p>Github是一个代码托管平台。开发者提交自己的代码，大家可以共享工作成果，很多出名的人把代码都发布到上面，而且是开源的，这个可以互相吸取经验，借鉴别人的代码，思想，共同进步。而且一般大公司的什么网站啊，什么软件发布啊都有一些是通过git这个平台发布的。很多国外国内大牛们都把代码提交到git平台，所以GitHub越来越好，越来越出名。</p><p>所以，不仅是为了博客搭建，就算是为了更好地交流学习，学会利用GitHub是非常有必要的。</p>        <h3 id="购买域名">          <span class="heading-link">购买域名</span>        </h3>      <p>非常简单的一步啊，所谓域名最简单的解释就是我这个博客的域名就是<span class="external-link"><a href="http://www.tuonan.fun" target="_blank" rel="noopener">www.tuonan.fun</a><i class="fa fa-external-link"></i></span></p><p>你需要选择并购买一个域名，来作为你的标识。</p><p>平台很多，这里推荐腾讯云、阿里云、百度云等，其实都差不多，价格可以自己看，最便宜的5元首年的都有。</p>        <h2 id="开始操作">          <span class="heading-link">开始操作</span>        </h2>              <h3 id="下载node-js">          <span class="heading-link">下载node.js</span>        </h3>      <p>下载链接：<span class="external-link"><a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a><i class="fa fa-external-link"></i></span> </p><p>这里建议下载左边的</p><p><img src="/2020/02/14/hexo-built/1.png" alt></p><p>下载好一路确定，什么事都不用操作，安装好。</p>        <h3 id="安装hexo">          <span class="heading-link">安装hexo</span>        </h3>      <p>在本地磁盘(如C盘、D盘)中新建一个文件夹Hexo用于存储本地文件， (因为我已经安装了，且只有C盘，这里就新建文件夹‘演示’，来代替本地磁盘)，打开刚刚新建的文件夹Hexo，右键选择Git Bash Here .</p><p><img src="/2020/02/14/hexo-built/2.png" alt></p><p>在git命令框输入(npm install -g hexo) </p><p><img src="/2020/02/14/hexo-built/3.png" alt></p><p>输完回车，耐心等待一段时间，会出来一大串东西,等再次回到这个界面时，我们可以检测版本输入 hexo -v</p><p><img src="/2020/02/14/hexo-built/4.png" alt></p><p><img src="/2020/02/14/hexo-built/5.png" alt></p><p>出现这样的结果时说明安装完成，这时我们再执行初始化命令：<code>hexo init</code> ，初始化完成之后打开所在的文件夹可以看到以下文件： </p><p><img src="/2020/02/14/hexo-built/6.png" alt></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node_modules：是依赖包</span><br><span class="line">public：存放的是生成的页面</span><br><span class="line">scaffolds：命令生成文章等的模板</span><br><span class="line">source：用命令创建的各种文章</span><br><span class="line">themes：主题</span><br><span class="line">_config.yml：整个博客的配置</span><br><span class="line">db.json：source解析所得到的</span><br><span class="line">package.json：项目所需模块项目的配置信息</span><br></pre></td></tr></table></div></figure><p>启动服务：</p><p>再相继输入以下指令：</p><p>(npm install –&gt; hexo clean –&gt; npm generate –&gt;hexo server）</p><p>在输入 hexo serve 之后</p><p>浏览器输入<code>http://localhost:4000</code>,理论上来说会出现本地访问页面，这时可以看到初步博客的样子。</p>        <h3 id="在github上面创建项目">          <span class="heading-link">在github上面创建项目</span>        </h3>      <p>新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是qq，那么你就新建<code>qq.github.io</code>的仓库（必须是你的用户名，其它名称无效） </p><p><img src="/2020/02/14/hexo-built/11.png" alt="11"></p><p><img src="/2020/02/14/hexo-built/12.png" alt="12"></p>        <h3 id="设置网站解析">          <span class="heading-link">设置网站解析</span>        </h3>      <p>这里我以腾讯云为例：</p><p><img src="/2020/02/14/hexo-built/7.png" alt="7"></p><p>点击解析后，选择添加记录，向如下设置，CHANE 的记录值填cqsg.github.io (cqsg是我github的名字，就是上面注册github项目的名字即你的用户名，比如你用户名是hhh，就填hhh.github.io)</p><p><img src="/2020/02/14/hexo-built/8.png" alt="8"></p><p>红色遮挡的记录值填写你的IP地址</p><p>不知道IP地址是多少？</p><p>键盘快捷键win+r输入cmd回车/或者win+x-&gt;a-&gt;是</p><p>得到如下dos窗口后输入ping cqsg.github.io   </p><p><img src="/2020/02/14/hexo-built/9.png" alt="9"></p><p>会出现这样的，红色的内容就是IP地址了，把它复制到上面，点击保存，解析就差不多完成了。</p><p>因为你刚才创建的项目已经被放到github服务器上面了，所以你这样相当于租用了github的服务器</p><p>Hexo目录下的source中建一个CNAME命名的文件夹(切记没有后缀)</p><p>创建方式，</p><p>右键新建txt文本-&gt;输入你购买的域名<span class="external-link"><a href="http://www.tuonan.fun" target="_blank" rel="noopener">www.tuonan.fun</a><i class="fa fa-external-link"></i></span> -&gt;保存关闭</p><p><img src="/2020/02/14/hexo-built/10.png" alt="10"></p><p>再到github上,刚刚创建的仓库内，找到settings</p><p><img src="/2020/02/14/hexo-built/13.png" alt="13"></p><p>向下滑找到这个，在Custom domain里输入你购买的域名，比如我应该输入<span class="external-link"><a href="http://www.tuonan.fun" target="_blank" rel="noopener">www.tuonan.fun</a><i class="fa fa-external-link"></i></span> ,输入完点击save</p><p><img src="/2020/02/14/hexo-built/14.png" alt="14"></p>        <h3 id="修改-config-yml">          <span class="heading-link">修改_config.yml</span>        </h3>      <p>在Hexo目录下</p><p><img src="/2020/02/14/hexo-built/15.png" alt="15"></p><p>打开_config.yml ，拖到最下面，deploy改成我这样的格式，repository这里后面把cqsg/cqsg.github.io 改成 <code>你的用户名/你的用户名.github.io</code>就好</p><p><img src="/2020/02/14/hexo-built/16.png" alt="16"></p>        <h3 id="使git部署">          <span class="heading-link">使git部署</span>        </h3>      <p>一步之遥了兄弟们，</p><p>输入npm install hexo-deployer-git –save </p><p>再输入执行:<strong>(</strong>hexo clean –&gt;hexo generate –&gt;hexo deploy) </p><p>大功告成兄弟们，你的博客建好了！</p><p>剩下的就是github的模板应用以及优化美化问题了，优化的我已经出了，可能的话我再会出一期关于博客美化的文章！！</p>        <h1 id="心得体会">          <span class="heading-link">心得体会</span>        </h1>      <p>终于写完了❤</p><p>自从经历了大失败过后，很久没有享受到完整自觉去做完一件事所带来的成就感了，这里找回了一点感觉，继续加油努力吧自己!!!</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基础语法</title>
      <link href="/2020/02/11/markdown-write/"/>
      <url>/2020/02/11/markdown-write/</url>
      
        <content type="html"><![CDATA[<p><img src="http://pic1.win4000.com/wallpaper/2018-12-13/5c12177e775a3.jpg" alt></p>        <h1 id="前言">          <span class="heading-link">前言</span>        </h1>      <p>最基础的Markdown语法，一起来充实丰富你的文章！</p> <a id="more"></a>        <h1 id="Markdown基础语法">          <span class="heading-link">Markdown基础语法</span>        </h1>              <h2 id="强调">          <span class="heading-link">强调</span>        </h2>      <p>星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格</p><div class="table-container"><table><thead><tr><th>代码</th><th>效果</th></tr></thead><tbody><tr><td><code>*这是斜体*</code></td><td><em>这是斜体</em></td></tr><tr><td><code>_这是斜体_</code></td><td><em>这是斜体</em></td></tr><tr><td><code>**这是粗体**</code></td><td><strong>这是粗体</strong></td></tr><tr><td><code>__这是粗体__</code></td><td><strong>这是粗体</strong></td></tr></tbody></table></div><hr>        <h2 id="标题">          <span class="heading-link">标题</span>        </h2>      <p>代码：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></div></figure><p> 效果如下： </p><blockquote>        <h1 id="一级标题">          <span class="heading-link">一级标题</span>        </h1>              <h2 id="二级标题">          <span class="heading-link">二级标题</span>        </h2>              <h3 id="三级标题">          <span class="heading-link">三级标题</span>        </h3>              <h4 id="四级标题">          <span class="heading-link">四级标题</span>        </h4>              <h5 id="五级标题">          <span class="heading-link">五级标题</span>        </h5>              <h6 id="六级标题">          <span class="heading-link">六级标题</span>        </h6>      </blockquote><p>注意</p><ol><li>最后一个 <code>#</code> 字符与标题<strong>中间要留有一个空格</strong> </li><li>标题共提供 <strong>6</strong> 级</li><li>一般行文中，标题应置于行首。若置于表格中，可能无法正确解析</li></ol><hr>        <h2 id="引用">          <span class="heading-link">引用</span>        </h2>      <p>Markdown 中引用通过符号 ‘&gt;’ 来实现。’&gt;’ 符号后的空格，可有可无。<br> 在引用的区块内，允许换行存在，换行并不会终止引用的区块。如果要结束引用，需要一行空白行，来结束引用的区块。</p><p>代码：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一句引用</span><br><span class="line">&gt; 这句仍然在引用区块内</span><br><span class="line">&gt;&gt; 这是一句嵌套引用</span><br><span class="line">&gt;&gt; 这句仍然在嵌套引用区块内</span><br><span class="line">&gt;</span><br><span class="line">&gt; 另起一行的引用。前面需要一个视觉上的空行表示内层嵌套的结束，空行前面的(&#39;&gt;&#39;)可以有可以没有。</span><br></pre></td></tr></table></div></figure><p> 效果如下：</p><blockquote><p>这是一句引用<br> 这句仍然在引用区块内</p><blockquote><p>这是一句嵌套引用<br> 这句仍然在嵌套引用区块内</p></blockquote><p>另起一行的引用。前面需要一个视觉上的空行表示内层嵌套的结束，空行前面的<strong>(‘&gt;’)</strong>可以有可以没有。</p></blockquote><hr>        <h2 id="列表">          <span class="heading-link">列表</span>        </h2>              <h3 id="有序列表">          <span class="heading-link">有序列表</span>        </h3>      <p>数字不能省略但可无序，点号之后的空格不能少。<br> 虽然下面代码的序号是 1，2，4，但是在显示时，仍然为自然数序列，并不是完成与编号一致。<br> 同样的，在列表的最后需要留有一行空行，以表达列表的结束，不然将作为一个无编号的列表存在。</p><p>代码：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 列表 A</span><br><span class="line">2. 列表 B</span><br><span class="line">4. 列表 C</span><br></pre></td></tr></table></div></figure><p> 效果如下：</p><ol><li>列表 A</li><li>列表 B</li><li>列表 C</li></ol>        <h3 id="无序列表">          <span class="heading-link">无序列表</span>        </h3>      <p>符号之后的空格不能少，<code>-+*</code>效果一样，但不能混合使用</p><p>代码：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- 列表 A1</span><br><span class="line">- 列表 B1</span><br><span class="line"></span><br><span class="line">+ 列表 A2</span><br><span class="line">+ 列表 B2</span><br><span class="line"></span><br><span class="line">* 列表 A3</span><br><span class="line">* 列表 B3</span><br></pre></td></tr></table></div></figure><p> 效果如下：</p><ul><li><p>列表 A1</p></li><li><p>列表 B1</p></li><li><p>列表 A2</p></li><li><p>列表 B2</p></li><li><p>列表 A3</p></li><li><p>列表 B3</p></li></ul>        <h3 id="嵌套列表">          <span class="heading-link">嵌套列表</span>        </h3>      <p>有序与无序，以及有序和无序列表本身都是可以自由的嵌套的。<br> Markdown 中的列表嵌套，通过<strong>在符号前增加空格</strong>来表示。同一级别下，前面的空格数目应该保持一致。每递进一级，我习惯上使用 2 个空格缩进来表示。</p><p>代码：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 一级列表 A</span><br><span class="line">- 一级列表 B</span><br><span class="line">  - 二级列表 A</span><br><span class="line">  * 二级列表 B</span><br><span class="line">    + 三级列表 A</span><br><span class="line">- 一级列表 C</span><br></pre></td></tr></table></div></figure><p>效果如下： </p><p><img src="/2020/02/11/markdown-write/C:%5CHexo%5Csource_posts%5Cmarkdown-write%5Ca.png" alt="a"></p><blockquote><p>注意，有序列表的嵌套，也是通过预留空格实现</p></blockquote><ol><li>有序一级列表 A</li><li>有序一级列表 B</li><li>有序二级列表 A</li><li>有序二级列表 B</li></ol>        <h2 id="分割线">          <span class="heading-link">分割线</span>        </h2>      <p>三个或更多<code>-_*</code>，必须单独一行，可含空格。<br> 例如以下形式，都可以表示为分割线。</p><p>代码：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- -    -</span><br><span class="line">___</span><br><span class="line">_   __</span><br><span class="line">***</span><br><span class="line">*  **</span><br><span class="line">  *  *  *</span><br></pre></td></tr></table></div></figure>        <h1 id="进阶语法">          <span class="heading-link">进阶语法</span>        </h1>              <h2 id="超链接">          <span class="heading-link">超链接</span>        </h2>      <p>图片与链接，在 Markdown 语法中表达类似，都是 <code>[链接文字](链接地址)</code> 这样的形式。</p>        <h3 id="普通链接">          <span class="heading-link">普通链接</span>        </h3>      <p>代码：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Wikipedia Markdown 条目](https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;Markdown)</span><br><span class="line">[Wikipedia Markdown 条目](https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;Markdown &quot;Markdown 条目&quot;)</span><br></pre></td></tr></table></div></figure>        <h3 id="图片链接">          <span class="heading-link">图片链接</span>        </h3>      <p>图片需要在 <code>[]</code> 前增加一个 <code>!</code> 以使得图片在网页上直接显示，而不仅仅是个链接形式。</p><p>代码:</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![维基百科 Logo](https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;static&#x2F;images&#x2F;project-logos&#x2F;zhwiki.png)</span><br><span class="line">![维基百科 Logo](https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;static&#x2F;images&#x2F;project-logos&#x2F;zhwiki.png &quot;维基 Logo&quot;)</span><br></pre></td></tr></table></div></figure><p>效果如下： </p><p>（暂时没有效果图啊！将就了）</p><p>上面分别有两个超链接和两张图片，两个超链接的区别在于一个增加了说明注释，而另一个没有，图片同理。 </p>        <h3 id="索引链接">          <span class="heading-link">索引链接</span>        </h3>      <p>索引链接，本质上与前两种链接一致，只是索引链接将 <code>[链接文字](链接地址)</code> 分离为<code>[链接文字][索引]</code>, <code>[索引]:链接地址</code> 的形式。</p><p>代码：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Wikipedia Markdown 条目][1]</span><br><span class="line">[1]:https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;Markdown</span><br></pre></td></tr></table></div></figure><p>效果如下：<br> <span class="external-link"><a href="https://zh.wikipedia.org/wiki/Markdown(https://link.jianshu.com?t=https://zh.wikipedia.org/wiki/Markdown)" target="_blank" rel="noopener">Wikipedia Markdown 条目</a><i class="fa fa-external-link"></i></span></p><hr>        <h2 id="表格">          <span class="heading-link">表格</span>        </h2>      <p>对于表格的支持，要根据具体的 Markdown 解释器来判定。在 hexo 中，支持以下 Markdown 形式的表格。<br> 需要注意以下几点：</p><ol><li>表格第一行为标题，样式会被特殊处理</li><li><code>|</code> 前后要留有空格</li><li>只要是三个 <code>-</code> 字符表示分隔线</li><li>通过 <code>:</code> 来区分，左对齐、居中、右对齐</li></ol><p>代码：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 1 | 2 | 3 |</span><br><span class="line">| --- |:---:| ---:|</span><br><span class="line">| aaa | bbbbbb | c |</span><br><span class="line">| aaaaaa | b | ccc |</span><br></pre></td></tr></table></div></figure><p> 效果如下：</p><div class="table-container"><table><thead><tr><th>1</th><th align="center">2</th><th align="right">3</th></tr></thead><tbody><tr><td>aaa</td><td align="center">bbbbbb</td><td align="right">c</td></tr><tr><td>aaaaaa</td><td align="center">b</td><td align="right">ccc</td></tr></tbody></table></div><p> 代码</p>        <h3 id="行内代码">          <span class="heading-link">行内代码</span>        </h3>      <p>如果要标记一小段行内代码，可以用反引号 <strong>`</strong> 把它包起来</p><p>代码：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一段行内代码，&#96;System.out.println(&quot;article id: &quot; + articleId);&#96; 摘自 Redis 工程。</span><br></pre></td></tr></table></div></figure><p>效果如下：</p><p>这是一段行内代码，<code>System.out.println(&quot;article id: &quot; + articleId);</code> 摘自 Redis 工程。</p>        <h3 id="区块代码">          <span class="heading-link">区块代码</span>        </h3>      <p>如果要成块的引用代码，有两种方法，一种是用制表符缩进，另一种，则是用三个反引号 <strong>```</strong>，将代码块包起来。<br> 在三个反引号后，加上语言说明，例如 <strong>```java</strong> 这样，便指定了之后的代码采用 java 的高亮。</p><p>效果如下：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public int genRandPost(int bound) &#123;</span><br><span class="line">    Random rand &#x3D; new Random();</span><br><span class="line">    int cnt &#x3D; rand.nextInt(bound);              </span><br><span class="line">    </span><br><span class="line">    Map&lt;String, String&gt; map &#x3D; new HashMap&lt;String, String&gt;();</span><br><span class="line">                            </span><br><span class="line">    long articleId;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; cnt; i++) &#123;</span><br><span class="line">        articleId &#x3D; jedis.incr(&quot;article:&quot;);</span><br><span class="line">        map.put(&quot;author&quot;, &quot;author&quot; + i);</span><br><span class="line">        map.put(&quot;article&quot;, &quot;This is article &quot; + i);</span><br><span class="line">        jedis.hmset(&quot;article:&quot; + articleId, map);</span><br><span class="line">        map.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;Insert &quot; + cnt + &quot; posts.&quot;);</span><br><span class="line">                                            </span><br><span class="line">    return cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p> 公式</p><p>大神提供了 hexo 下自动部署 MathJax 插件。安装好插件后，遍可以使用 (LaTex) 来显示数学公式了。<br> 在行内输入公式，需要在公式前后加上两个反斜杠 ‘’ 以及一个括号，前后两个括号要成对。<br> 而独立成行的公式，则使用两个美元符 ‘$’。</p><p>代码：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在行内插入公式 \\(x&#x3D;\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;\\) 是这样的。</span><br><span class="line"></span><br><span class="line">$$x&#x3D;\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\begin&#123;eqnarray&#125;</span><br><span class="line">\nabla\cdot\vec&#123;E&#125; &amp;&#x3D;&amp; \frac&#123;\rho&#125;&#123;\epsilon_0&#125; \\</span><br><span class="line">\nabla\cdot\vec&#123;B&#125; &amp;&#x3D;&amp; 0 \\</span><br><span class="line">\nabla\times\vec&#123;E&#125; &amp;&#x3D;&amp; -\frac&#123;\partial B&#125;&#123;\partial t&#125; \\</span><br><span class="line">\nabla\times\vec&#123;B&#125; &amp;&#x3D;&amp; \mu_0\left(\vec&#123;J&#125;+\epsilon_0\frac&#123;\partial E&#125;&#123;\partial t&#125; \right)</span><br><span class="line">\end&#123;eqnarray&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></div></figure><p> 效果如下：</p><p>在行内插入公式 (x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}) 是这样的。</p><p>$$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$$</p><p>$$<br> \begin{eqnarray}<br> \nabla\cdot\vec{E} &amp;=&amp; \frac{\rho}{\epsilon_0} <br> \nabla\cdot\vec{B} &amp;=&amp; 0 <br> \nabla\times\vec{E} &amp;=&amp; -\frac{\partial B}{\partial t} <br> \nabla\times\vec{B} &amp;=&amp; \mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t} \right)<br> \end{eqnarray}<br>$$</p>        <h1 id="参考资料">          <span class="heading-link">参考资料</span>        </h1>      <p> <span class="external-link"><a href="https://www.jianshu.com/p/72cdf5c50d99" target="_blank" rel="noopener">[1][Wikipedia Markdown 条目]</a><i class="fa fa-external-link"></i></span><br> [2]<span class="external-link"><a href="http://ibruce.info/2013/11/26/markdown/" target="_blank" rel="noopener">不如的博客</a><i class="fa fa-external-link"></i></span><br> [3]<span class="external-link"><a href="http://wowubuntu.com/markdown/index.html" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a><i class="fa fa-external-link"></i></span><br> [4]<span class="external-link"><a href="http://www.jianshu.com/p/17fdcf17bbb4" target="_blank" rel="noopener">Markdown：让书写更美好</a><i class="fa fa-external-link"></i></span></p><p> [5]<span class="external-link"><a href="http://blog.csdn.net/xiahouzuoxin/article/details/26478179" target="_blank" rel="noopener">Markdown中插入数学公式的方法 </a><i class="fa fa-external-link"></i></span></p><p> [6]<span class="external-link"><a href="https://www.jianshu.com/p/72cdf5c50d99" target="_blank" rel="noopener">Markdown 语法简单小结</a><i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo优化加速</title>
      <link href="/2020/02/11/hexo-accelerate/"/>
      <url>/2020/02/11/hexo-accelerate/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1581411172982&di=4c20e35175e16bd37c44ef7b06e6a027&imgtype=0&src=http%3A%2F%2Fi2.yeyoucdn.com%2Fb5yvfc%2FYWxqaGBf%2Fcms3yeyou%2FhDttMYbljcFfAsa.jpg" alt></p>        <h1 id="前言">          <span class="heading-link">前言</span>        </h1>      <p>不得不说，hexo博客速度真的是太慢了，还是建站前期的我全篇就几张图片都要载半天，试过不同的浏览器还是一样慢，看起来线路的问题，于是我上网查了一下发现有许多解决方法，看起来非常牛逼，但是按着一步一步下去却有很多大坑，昨天搞到晚上两三点才搞好，特此记录方式，以防未来再被坑。</p> <a id="more"></a>        <h1 id="原因">          <span class="heading-link">原因</span>        </h1>      <p>博客加载慢主要有两个原因：</p><p>​    1、站内原因：内容太多了、图片太多了，导致加载需要内容多，加载慢</p><p>​    2、线路原因：托管网站的github是外网，访问外网肯定慢</p>        <h1 id="优化方法一">          <span class="heading-link">优化方法一</span>        </h1>      <p>针对第一个原因我们可以利用glup压缩，把一些静态资源高效压缩，减少请求的数据量从而达到优化博客访问速度的目的 。</p>        <h2 id="安装gulp">          <span class="heading-link">安装gulp</span>        </h2>      <p>首先安装gulp，执行以下命令：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm insatll gulp -g</span><br></pre></td></tr></table></div></figure><p>要实现gulp压缩需要安装以下五个模块：</p><blockquote><ul><li>gulp-htmlclean       // 清理html</li><li>gulp-htmlmin        // 压缩html</li><li>gulp-minify-css     // 压缩css</li><li>gulp-uglify            // 混淆js</li><li>gulp-imagemin     // 压缩图片</li></ul></blockquote><p> 安装模块： </p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br></pre></td></tr></table></div></figure><p> 安装的模块可以在根目录下的<code>package.json</code>文件里面看到。 </p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;gulp&quot;: &quot;^3.9.1&quot;,</span><br><span class="line">&quot;gulp-htmlclean&quot;: &quot;^2.7.14&quot;,</span><br><span class="line">&quot;gulp-htmlmin&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">&quot;gulp-imagemin&quot;: &quot;^3.3.0&quot;,</span><br><span class="line">&quot;gulp-minify-css&quot;: &quot;^1.2.4&quot;,</span><br><span class="line">&quot;gulp-uglify&quot;: &quot;^3.0.0&quot;,</span><br></pre></td></tr></table></div></figure>        <h2 id="添加gulpfile-js">          <span class="heading-link">添加gulpfile.js</span>        </h2>      <p>进入博客根目录，新建<code>gulpfile.js</code>文件，内容如下：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">var gulp &#x3D; require(&#39;gulp&#39;);</span><br><span class="line">var minifycss &#x3D; require(&#39;gulp-minify-css&#39;);</span><br><span class="line">var uglify &#x3D; require(&#39;gulp-uglify&#39;);</span><br><span class="line">var htmlmin &#x3D; require(&#39;gulp-htmlmin&#39;);</span><br><span class="line">var htmlclean &#x3D; require(&#39;gulp-htmlclean&#39;);</span><br><span class="line">var imagemin &#x3D; require(&#39;gulp-imagemin&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 压缩html</span><br><span class="line">gulp.task(&#39;minify-html&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.html&#39;)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            removeComments: true,</span><br><span class="line">            minifyJS: true,</span><br><span class="line">            minifyCSS: true,</span><br><span class="line">            minifyURLs: true,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;))</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 压缩css</span><br><span class="line">gulp.task(&#39;minify-css&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.css&#39;)</span><br><span class="line">        .pipe(minifycss(&#123;</span><br><span class="line">            compatibility: &#39;ie8&#39;</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 压缩js</span><br><span class="line">gulp.task(&#39;minify-js&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;js&#x2F;**&#x2F;*.js&#39;)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 压缩图片</span><br><span class="line">gulp.task(&#39;minify-images&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;images&#x2F;**&#x2F;*.*&#39;)</span><br><span class="line">        .pipe(imagemin(</span><br><span class="line">        [imagemin.gifsicle(&#123;&#39;optimizationLevel&#39;: 3&#125;), </span><br><span class="line">        imagemin.jpegtran(&#123;&#39;progressive&#39;: true&#125;), </span><br><span class="line">        imagemin.optipng(&#123;&#39;optimizationLevel&#39;: 7&#125;), </span><br><span class="line">        imagemin.svgo()],</span><br><span class="line">        &#123;&#39;verbose&#39;: true&#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;images&#39;))</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 默认任务</span><br><span class="line">gulp.task(&#39;default&#39;, [</span><br><span class="line">    &#39;minify-html&#39;,&#39;minify-css&#39;,&#39;minify-js&#39;,&#39;minify-images&#39;</span><br><span class="line">]);</span><br></pre></td></tr></table></div></figure>        <h2 id="开始压缩">          <span class="heading-link">开始压缩</span>        </h2>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">gulp  &#x2F;&#x2F; 执行压缩，两条命令可以合并：hexo g &amp;&amp; gulp</span><br></pre></td></tr></table></div></figure><p>然后就可以执行部署命令：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></div></figure>        <h2 id="参考文章">          <span class="heading-link">参考文章</span>        </h2>      <p>以上内容为以下文章中总结</p><blockquote><ul><li><span class="external-link"><a href="https://link.jianshu.com?t=http://sanyecao.me/hexo-minify.html" target="_blank" rel="noopener">Hexo优化方案 gulp插件静态资源压缩</a><i class="fa fa-external-link"></i></span></li><li><span class="external-link"><a href="https://link.jianshu.com?t=https://www.karlzhou.com/articles/compress-minify-hexo/" target="_blank" rel="noopener">优化Hexo博客 - 压缩 HTML、CSS、JS、IMG 等</a><i class="fa fa-external-link"></i></span></li><li><span class="external-link"><a href="https://link.jianshu.com?t=https://www.liuxinggang.com/2016-12-06-hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%EF%BC%8D%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">hexo博客进阶－性能优化</a><i class="fa fa-external-link"></i></span></li><li><span class="external-link"><a href="https://www.jianshu.com/p/93b63852f0b3" target="_blank" rel="noopener">Hexo博客之速度优化</a><i class="fa fa-external-link"></i></span></li></ul></blockquote><p>这样大概就成功了，这方法按照以上教程一步步跟踪不会有问题，但是速度提升的也不是特别明显。</p>        <h1 id="优化方法二">          <span class="heading-link">优化方法二</span>        </h1>      <p>针对第二个原因，我们可以采取coding部署，<span class="external-link"><a href="https://link.jianshu.com?t=https://coding.net/" target="_blank" rel="noopener">Coding</a><i class="fa fa-external-link"></i></span>算是国内的Github，同样提供代码托管、项目管理和Pages服务等，因此我们可以像把网站部署在Github上一样，部署在Coding 上，通过配置<code>_config.yml</code>文件实现Github和Coding上的文件同时更新，然后通过域名分流解析，来达到网站加速的目的。</p><p>（坑非常多）</p>        <h2 id="流程">          <span class="heading-link">流程</span>        </h2>              <h3 id="注册账号">          <span class="heading-link">注册账号</span>        </h3>      <p>​    官网<span class="external-link"><a href="https://link.jianshu.com?t=https://coding.net/" target="_blank" rel="noopener">Coding</a><i class="fa fa-external-link"></i></span> </p><p>###创建项目</p><p><img src="/2020/02/11/hexo-accelerate/a.png" alt="是"></p><p>项目名为你的coding账号名，例如我的账号名是tuonan，所以我新建的项目为tuonan，注意要在初始化项目那一项打勾 </p><p><img src="/2020/02/11/hexo-accelerate/b.png" alt></p>        <h3 id="部署公钥">          <span class="heading-link">部署公钥</span>        </h3>      <p>点击右上角的个人账号 —&gt; 个人设置 —&gt; SSH公钥 —&gt; 新增公钥。</p><p>Mac默认的公钥路径为<code>/Users/用户名/.ssh</code>，公钥文件为<code>id_rsa.pub</code>，复制内容添加进去就可以了。添加完成后以后上传代码的时候，就不再需要输入账号密码了。</p><p><img src="/2020/02/11/hexo-accelerate/c.png" alt="1581392290125"></p><p> <img src="/2020/02/11/hexo-accelerate/d.png" alt="d"></p><blockquote><p>测试 SSH 公钥是否添加成功：本地打开 Git Bash 窗口，输入一下命令：</p><p><code>ssh -T git@coding.net</code></p></blockquote><p>若出现这种情况</p><blockquote><p><code>ssh: connect to host coding.net port 22: Connection refused</code></p><p><img src="/2020/02/11/hexo-accelerate/e.png" alt="e"></p></blockquote><p>说明防火墙完全屏蔽了端口 22 ，这时候不要慌张，直接输入如下命令使用 Coding 提供的 443 端口 SSH 服务即可解决：</p><blockquote><p><code>ssh -T -p 443 git@git-ssh.coding.net</code></p></blockquote><p>接着会显示是否继续，选择 yes 继续，如果提示下列内容成功，即 SSH 公钥配置成功： </p><p><img src="/2020/02/11/hexo-accelerate/f.png" alt="f"></p>        <h3 id="配置博客主文件">          <span class="heading-link">配置博客主文件</span>        </h3>      <p>打开 Hexo 博客主配置文件 <code>_config.yml</code>，找到 <code>deploy</code> 属性，作如下配置：</p><p>deploy:</p><p>​    type: git<br>    repository:<br>      github: #与原来一致<br>      coding:  #按自己的来，格式是这样<br>    branch: master</p><p>按照下图在这里可以查到coding要填的东西，是红色区域内容</p><p><img src="/2020/02/11/hexo-accelerate/g.png" alt></p>        <h3 id="修改域名解析">          <span class="heading-link">修改域名解析</span>        </h3>      <p>增加CNAME记录 ，修改之前将Github线路类型修改为国外，记录值不变。新建绑定到Coding的解析，线路类型为默认，记录值为<code>pages.coding.me</code> (这里就是坑之一，下面会解释，先别填)</p><p><img src="/2020/02/11/hexo-accelerate/l.png" alt="l"></p>        <h3 id="Coding构建静态页面">          <span class="heading-link">Coding构建静态页面</span>        </h3>      <p><img src="/2020/02/11/hexo-accelerate/i.png" alt="i"></p><p>点设置，这里一个天坑出现了</p><p><img src="/2020/02/11/hexo-accelerate/j.png" alt="j"></p><p>这里原本绑定的时候证书状态要申请才能正常啊，然后我一直申请一直申请，都是申请失败，申请了一个多小时，我发现事情并不对劲啊，然后我一百度出带问题了。</p>        <h4 id="第一个坑：coding记录值的问题">          <span class="heading-link">第一个坑：coding记录值的问题</span>        </h4>      <p>这里我卡了几个小时，在百度上几乎查了所有相关博客，都是要求记录值为<code>pages.coding.me</code> 或者是<code>（username).coding.me</code> ,真的是气到吐血！可能是以前版本的原因要求这么写。不断申请到想吐了，证书状态还是申请失败，最后实在没办法一直试，尝试了一下上面那张图的紫色笔遮挡部分，竟然就是要填这个。</p>        <h4 id="第二个坑：线路类型导致的问题">          <span class="heading-link">第二个坑：线路类型导致的问题</span>        </h4>      <p>申请证书时，coding在境内，github在境外，所以过程中要先把github的记录暂停，等证书申请成功了再继续打开。</p><p>以上坑排除后，再申请证书，不出意外的话证书状态应该是正常了。</p>        <h3 id="立即部署">          <span class="heading-link">立即部署</span>        </h3>      <p><img src="/2020/02/11/hexo-accelerate/i.png" alt="i"></p><p>点击立即部署，下面提升成功✔图标就差不多了，剩下的就是重启一下hexo就好了</p><p>hexo clean、hexo g、hexo d</p>        <h1 id="结果及个人感悟">          <span class="heading-link">结果及个人感悟</span>        </h1>      <p>第二种方法速度真的改变很大，快了很多，虽然一番波折，但是结果很好值得，感觉有一点点成就感。</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站技术上的问题</title>
      <link href="/2020/02/10/askfor-this-blog/"/>
      <url>/2020/02/10/askfor-this-blog/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/02/10/askfor-this-blog/(674).jpg" alt="(674)"></p><p>是待解决的问题，不是教程和解答，求个大神来解答问题</p> <a id="more"></a><p>#问题一</p><p>在把hexo连到coding之后，执行hexo deploy指令时，必须再输密码，试过好多网上方法不管用，求解</p>        <h1 id="问题二（已解决）">          <span class="heading-link">问题二（已解决）</span>        </h1>      <p>在把hexo连到coding之后，评论会出现以下情况：</p><p><img src="/2020/02/10/askfor-this-blog/a.png" alt></p><p>也是得不到解决</p><p>解决方法：我是傻逼</p>]]></content>
      
      
      <categories>
          
          <category> 说明 </category>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 说明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Front-matter的用法</title>
      <link href="/2020/02/09/about-Front-matter/"/>
      <url>/2020/02/09/about-Front-matter/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1581412097404&di=29e4426c776ec87e1b479a8856b3a78d&imgtype=0&src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farchive%2F4a0d708de3695ba0d2adde228348f7584130061a.jpg" alt></p>        <h1 id="前言">          <span class="heading-link">前言</span>        </h1>      <p>写一篇文章最开始就是要知道Front-matter怎么用，关于Front-matter的一些内容和技巧</p> <a id="more"></a>        <h2 id="介绍">          <span class="heading-link">介绍</span>        </h2>      <p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于Front-matter的用法</span><br><span class="line">date: 2020-02-09 10:18:57</span><br><span class="line">categories: 建站</span><br><span class="line">tags: Front-matter</span><br><span class="line">---</span><br></pre></td></tr></table></div></figure>        <h2 id="预设">          <span class="heading-link">预设</span>        </h2>      <p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td></td></tr><tr><td><code>title</code></td><td>标题</td><td>文章的文件名</td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td></td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td><td></td></tr><tr><td><code>keywords</code></td><td>仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</td><td></td></tr><tr><td><code>excerpt</code></td><td>指定文章摘要</td><td></td></tr></tbody></table></div><p>下面几种 Front-Matter 属性在 Hexo 文档中并没有出现，但在 Hexo 提供的主题单元测试库中出现。这些属性如下： </p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>link</code></td><td>链接(当点击该文章标题时, 打开所指定的链接地址 )</td><td></td></tr><tr><td><code>photos</code></td><td>图片 ( 指定一些图片,Stun 主题将其显示在文章最顶部)</td><td></td></tr><tr><td><code>top_image</code></td><td>用于设置某篇文章顶部的大图</td><td></td></tr><tr><td><code>toc</code></td><td>文章是否启用目录。会覆盖主题配置文件中的全局设置</td><td></td></tr><tr><td><code>quicklink</code></td><td>是否在浏览器空闲时间预取可视区内的链接，以加快后续页面的加载速度</td><td></td></tr><tr><td><code>math</code></td><td>是否需要解析数学公式</td><td></td></tr><tr><td><code>reward</code></td><td>文章是否启用打赏功能</td><td></td></tr><tr><td><code>copyright</code></td><td>文章是否启用版权信息</td><td></td></tr></tbody></table></div><p>下面是安装某些插件后，可以设置的几种 Front-Matter 属性 </p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>top</code></td><td>文章是否置顶</td><td></td></tr><tr><td><code>no-emoji</code></td><td>是否解析文章中的 emoji 代码</td><td></td></tr></tbody></table></div>        <h2 id="具体参数">          <span class="heading-link">具体参数</span>        </h2>              <h3 id="分类-和-标签">          <span class="heading-link">分类 和 标签</span>        </h3>      <p>​    分类和标签在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code></p>        <h4 id="注：分类方法的分歧">          <span class="heading-link">注：分类方法的分歧</span>        </h4>      <p>​    WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - Diary</span><br><span class="line">  - Life</span><br></pre></td></tr></table></div></figure><p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line">- [Diary, Games]</span><br><span class="line">- [Life]</span><br></pre></td></tr></table></div></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p><p>标签没有顺序性和层次性，<strong>只能设置为同级的</strong>。也就是说，标签只有一种用法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">tags:</span><br><span class="line">  - PlayStation</span><br><span class="line">  - Games</span><br><span class="line">  - [Diary, Life]</span><br><span class="line">---</span><br></pre></td></tr></table></div></figure><p>这样会被解析为 <code>PlayStation</code>、<code>Games</code>、<code>Diary,Life</code> 三个并列标签。</p><p>(已尝试:直接tags：A 、B就行)</p>        <h3 id="其他">          <span class="heading-link">其他</span>        </h3>      <p>​    有用到的话，详见<span class="external-link"><a href="https://liuyib.github.io/hexo-theme-stun/zh-CN/advanced/advanced-setting.html#front-matter" target="_blank" rel="noopener">主题指南</a><i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Front-matter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次测试</title>
      <link href="/2020/02/06/who-know/"/>
      <url>/2020/02/06/who-know/</url>
      
        <content type="html"><![CDATA[        <h1 id="大家好">          <span class="heading-link">大家好</span>        </h1>              <h2 id="我是拖男">          <span class="heading-link">我是拖男</span>        </h2>              <h3 id="今天舒服了">          <span class="heading-link">今天舒服了</span>        </h3>      <p>冲！！</p><p><img src="/2020/02/06/who-know/asd.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于本站</title>
      <link href="/2020/02/05/about-this/"/>
      <url>/2020/02/05/about-this/</url>
      
        <content type="html"><![CDATA[        <h1 id="本站建立初衷">          <span class="heading-link">本站建立初衷</span>        </h1>      <p>记录自己的成长经历和学习经验，同时分享给来参观的有缘人</p><p><img src="/2020/02/05/about-this/a.jpg" alt></p><p>太可爱了A W S L ! </p>]]></content>
      
      
      <categories>
          
          <category> 说明 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 说明 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
